import pandas as pd
from collections import Counter
import numpy as np

time_lst = ['Time',
            '08:00:00-09:00:00','09:00:00-10:00:00','10:00:00-11:00:00',
            '11:00:00-12:00:00','12:00:00-13:00:00','13:00:00-14:00:00',
            '14:00:00-15:00:00','15:00:00-16:00:00','16:00:00-17:00:00',
            '17:00:00-18:00:00','18:00:00-19:00:00','19:00:00-20:00:00',
            '20:00:00-21:00:00','21:00:00-22:00:00','22:00:00-23:00:00',
            '23:00:00-00:00:00','00:00:00-01:00:00','01:00:00-02:00:00',
            '02:00:00-03:00:00','03:00:00-04:00:00','04:00:00-05:00:00',
            '05:00:00-06:00:00','06:00:00-07:00:00','07:00:00-08:00:00']

def read_excel(path):
    df_master = pd.read_excel(path,sheet_name=None,header=None)
    return df_master # all sheets, use df.keys() to get sheet name

def write(path,df_result,df_100T,df_250T,df_breakdown_100T,df_breakdown_250T):
    with pd.ExcelWriter(path) as writer:
        df_breakdown_100T.to_excel(writer,sheet_name = '100T breakdown',
                                   index = True)
        df_breakdown_250T.to_excel(writer,sheet_name = '250T breakdown',
                                   index = True)
        df_100T.to_excel(writer,sheet_name = '100T', index = True)
        df_250T.to_excel(writer,sheet_name = '250T', index = True)
        df_result.to_excel(writer,sheet_name = 'master sheet', index = True)

def transpost(df):
    return df.T

def align_format(df):
    lst2 = list(df.iloc[0,1:])
    lst1 = reindex_duration(lst2)
    df.iloc[0,1:] = lst1
    return df

def reindex_duration(lst2):#rearrange duration
    dic = {'start':0, 'middle':'-','end':0}
    from datetime import time
    s = 8
    h = 8
    lst=[]
    dic['start'] = time(hour = int(s),minute=0,second=0)
    dic['end'] = time(hour = int(h),minute=0,second=0)
    for indx in lst2:
        if h+1<24:
            h+=1
            dic['end'] = time(hour = int(h),minute=0,second=0)
        else:
            h=0
            dic['end'] = time(hour = int(h),minute=0,second=0)
        indx = str(dic['start'])+dic['middle']+str(dic['end'])
        lst.append(indx)
        if s+1<24:
            s+=1
            dic['start'] = time(hour = int(s),minute=0,second=0)
        else:
            s=0
            dic['start'] = time(hour = int(s),minute=0,second=0)
    lst = lst[:len(lst)]
    dic_tem = {'Duration':lst}
    return lst

def rename(df,sheet):
    df.iloc[0,0] = 'Time'
    col = list(df.columns)[1:]
    for col_name in col:
        df.rename(columns ={col_name:sheet},inplace=True)
    return df

def join(df_master,sheet_names):
    global time_lst
    df_result = pd.DataFrame(time_lst)#empty dataframe
    for sheet in sheet_names:
        df_output = df_master[sheet]
        df_output = rename(transpost(align_format(df_output)),sheet)
        df_result= df_result.merge(df_output.iloc[:,1:],
                                   how='left',
                                   left_index = True,right_index=True)
    #fill blanks with 0
    df_result.fillna(0,inplace=True)
    df_result.iloc[24,1:]=0
    return df_result

def extract_normal(df):
    return df.iloc[0:10,:]#extract normal hours

def extract_OT(df):
    return df.iloc[[0,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],:]#extract OT hours

def isolate_100T(df):#pass in deep copy
    dic={}
    col_indx = [i for i in range(len(df.columns))]
    for num in range(1,len(df.columns)):
        if 'Mobile Crane (100T)' not in df.iloc[0,num]:
            col_indx.remove(num)
    df_new = df.iloc[:,col_indx]
    s1=set(df_new.iloc[0,1:])
    for i in s1:
        dic[i]=i[20:]
    df_new.replace(dic,inplace=True)
    return df_new

def isolate_250T(df):#pass in deep copy
    dic={}
    col_indx = [i for i in range(len(df.columns))]
    for num in range(1,len(df.columns)):
        if 'Mobile Crane (250T)' not in df.iloc[0,num]:
            col_indx.remove(num)
    df_new = df.iloc[:,col_indx]
    s1=set(df_new.iloc[0,1:])
    for i in s1:
        dic[i]=i[20:]
    df_new.replace(dic,inplace=True)
    return df_new

def breakdown(df):
    df_normal_hrs = extract_normal(df)#all normal hrs
    df_OT_hrs = extract_OT(df) #all OT hours
    normal_hrs_lst = df_normal_hrs.iloc[1:,1:].values
    normal_hrs_lst = normal_hrs_lst.flatten('C')
    OT_hrs_lst = df_OT_hrs.iloc[1:,1:].values
    OT_hrs_lst = OT_hrs_lst.flatten('C')
    #create Counter
    counter_normal = Counter(normal_hrs_lst)
    counter_OT = Counter(OT_hrs_lst)
    print(counter_normal)
    print(counter_OT)
    #counter stored in list
    counter_lst=[counter_normal,counter_OT]
    #for crane1
    length_normal=len(counter_normal.keys())
    length_OT = len(counter_OT.keys())
    if length_normal > length_OT:
        df_breakdown = pd.DataFrame(columns=['normal hrs','OT hrs'],
                                    index = counter_normal.keys())
    elif length_normal < length_OT:
        df_breakdown = pd.DataFrame(columns=['normal hrs','OT hrs'],
                                    index = counter_OT.keys())
    else:
        df_breakdown = pd.DataFrame(columns=['normal hrs','OT hrs'],
                                    index = counter_normal.keys())
    for indx in df_breakdown.index:
        df_breakdown.at[indx,'normal_hrs']=counter_normal[indx]
        df_breakdown.at[indx,'OT_hrs']=counter_OT[indx]
    df_breakdown.drop(index = 0,inplace=True)
    return df_breakdown.iloc[:,2:]
#driver
if __name__ == '__main__':
    read_path = str(input("Please enter in file location of test file:\n"))
    read_path = read_path.replace('\\','/')
    write_path = str(input("Please enter in file location of result file:\n"))
    write_path = write_path.replace('\\','/')
    #read master file
    df_master = read_excel(read_path)
    sheet_names = tuple(df_master.keys())
    df_result = join(df_master,sheet_names)
    df_result_copy1 = df_result.copy(deep = True)
    df_result_copy2 = df_result.copy(deep = True)
    df_100T = isolate_100T(df_result_copy1)
    df_250T= isolate_250T(df_result_copy2)
    #trial
    df_breakdown_100T = breakdown(df_100T)
    df_breakdown_250T = breakdown(df_250T)
    write(write_path,df_result,df_100T,df_250T,df_breakdown_100T,df_breakdown_250T)
    print('Mobile Crane breakdown summary generated')
