import pandas as pd
from collections import Counter
import numpy as np

time_lst = ['Time',
            '08:00:00-09:00:00','09:00:00-10:00:00','10:00:00-11:00:00',
            '11:00:00-12:00:00','12:00:00-13:00:00','13:00:00-14:00:00',
            '14:00:00-15:00:00','15:00:00-16:00:00','16:00:00-17:00:00',
            '17:00:00-18:00:00','18:00:00-19:00:00','19:00:00-20:00:00',
            '20:00:00-21:00:00','21:00:00-22:00:00','22:00:00-23:00:00',
            '23:00:00-00:00:00','00:00:00-01:00:00','01:00:00-02:00:00',
            '02:00:00-03:00:00','03:00:00-04:00:00','04:00:00-05:00:00',
            '05:00:00-06:00:00','06:00:00-07:00:00','07:00:00-08:00:00']


def read_excel(path):
    df_master = pd.read_excel(path,sheet_name=None,header=None)
    return df_master # all sheets, use df.keys() to get sheet name

def write(path,df):
    with pd.ExcelWriter(path) as writer:
        df.to_excel(writer,sheet_name = 'Enter in sheet name', index = True)

def transpost(df):
    return df.T

def align_format(df):
    lst2 = list(df.iloc[0,1:])
    lst1 = reindex_duration(lst2)
    df.iloc[0,1:] = lst1
    return df

def reindex_duration(lst2):#rearrange duration
    dic = {'start':0, 'middle':'-','end':0}
    from datetime import time
    s = 8
    h = 8
    lst=[]
    dic['start'] = time(hour = int(s),minute=0,second=0)
    dic['end'] = time(hour = int(h),minute=0,second=0)
    for indx in lst2:
        if h+1<24:
            h+=1
            dic['end'] = time(hour = int(h),minute=0,second=0)
        else:
            h=0
            dic['end'] = time(hour = int(h),minute=0,second=0)
        indx = str(dic['start'])+dic['middle']+str(dic['end'])
        lst.append(indx)
        if s+1<24:
            s+=1
            dic['start'] = time(hour = int(s),minute=0,second=0)
        else:
            s=0
            dic['start'] = time(hour = int(s),minute=0,second=0)
    lst = lst[:len(lst)]
    dic_tem = {'Duration':lst}
    return lst

def rename(df,sheet):
    df.iloc[0,0] = 'Time'
    col = list(df.columns)[1:]
    for col_name in col:
        df.rename(columns ={col_name:sheet},inplace=True)
    return df

def join(df_master,sheet_names):
    global time_lst
    df_result = pd.DataFrame(time_lst)#empty dataframe
    for sheet in sheet_names:
        df_output = df_master[sheet]
        df_output = rename(transpost(align_format(df_output)),sheet)
        df_result= df_result.merge(df_output.iloc[:,1:],
                                   how='left',
                                   left_index = True,right_index=True)
    #fill blanks with 0
    df_result.fillna(0,inplace=True)
    df_result.iloc[24,1:]=0
    return df_result

def extract_normat(df):
    return df.iloc[0:9,:]

def extract_OT(df):
    return df.iloc[10:,:]

def isolate_100T(df):#pass in deep copy
    crane_type = tuple(df_mastercopy.iloc[0,1:])
    for crane in crane_type:
        if 'Mobile Crane (100T)' not in crane:
            df.drop(columns = crane,inplace=True)
    l1 = len(list(df.columns))
    for indx in range(1:l1+1):
        val = df.iloc[0,indx]
        new_val = val[20:]
        df.iloc[0,indx]= new_val
    return df

def isolate_250T(df):#pass in deep copy
    crane_type = tuple(df_mastercopy.iloc[0,1:])
    for crane in crane_type:
        if 'Mobile Crane (250T)' not in crane:
            df.drop(columns = crane,inplace=True)
    for indx in range(1:l1+1):
        val = df.iloc[0,indx]
        new_val = val[20:]
        df.iloc[0,indx]= new_val
    return df

def breakdown(df1,df2):#df1 = crane_type1, df2 = crane_type2
    df1_normal_hrs = extract_normal(df1)#all normal hrs
    df1_OT_hrs = extract_OT(df1) #all OT hours
    df2_normal_hrs = extract_normal(df2)
    df2_OT_hrs = extract_OT(df2)
    #create df_breakdown DataFrame
    df_breakdown_crane1 = pd.DataFrame(columns =['normal hours','OT hours'])
    df_breakdown_crane2 = pd.DataFrame(columns =['normal hours','OT hours'])
    #create Counter
    c1_normal = Counter(df1_normal_hrs)
    c1_OT = Counter(df1_OT_hrs)
    c2_normal = Counter(df2_normal_hrs)
    c2_OT = Counter(df2_OT_hrs)
    #counter stored in list
    c1_lst=[c1_normal,cl_OT]
    c2_lst=[c2_normal,c2_OT]
    #for crane1:
    
#driver
if __name__ == '__main__':
    read_path = str(input("Please enter in file location of test file:\n"))
    read_path = read_path.replace('\\','/')
    write_path = str(input("Please enter in file location of result file:\n"))
    write_path = write_path.replace('\\','/')
    #read master file
    df_master = read_excel(read_path)
    sheet_names = tuple(df_master.keys())
    df_result = join(df_master,sheet_names)
    df_crane_type1 = isolate_100T(df_result.copy(deep=True))
    df_crane_type2 = isolate_250T(df_result.copy(deep=True))
    write(write_path,df_result)
